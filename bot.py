#!/usr/bin/env python3
"""
Instagram Automation Bot v2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TikTok
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ - –ü–†–û–°–¢–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import TELEGRAM_TOKEN, ADMIN_TELEGRAM_ID

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for directory in ["./logs", "./data", "./sessions"]:
        if not os.path.exists(directory):
            os.makedirs(directory)

    # –î–ª—è Docker —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    log_dir = "/app/logs" if os.path.exists("/app") else "./logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    logging.basicConfig(
        level=getattr(logging, os.getenv("LOG_LEVEL", "INFO")),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(os.path.join(log_dir, "bot.log")),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

async def universal_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    logger.info(f"üìù TEXT INPUT: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"üîç USER_DATA: {context.user_data}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        from utils.validators import is_admin, is_user
        if not is_admin(user_id) and not is_user(user_id):
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
            return
        
        # 1. –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ö–°–ò (proxy_step)
        if 'proxy_step' in context.user_data:
            logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–≤–æ–¥ –ø—Ä–æ–∫—Å–∏: {context.user_data['proxy_step']}")
            try:
                from handlers.proxy import handle_proxy_input
                await handle_proxy_input(update, context)
                return
            except ImportError as e:
                logger.error(f"‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.")
                return
        
        # 2. –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í INSTAGRAM (step)
        elif 'step' in context.user_data and context.user_data.get('platform') != 'tiktok':
            logger.info(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–≤–æ–¥ Instagram: {context.user_data['step']}")
            try:
                from handlers.scenarios import handle_text_input
                await handle_text_input(update, context)
                return
            except ImportError as e:
                logger.error(f"‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
                return
        
        # 3. –û–ë–†–ê–ë–û–¢–ö–ê TIKTOK –°–¶–ï–ù–ê–†–ò–ï–í
        elif 'step' in context.user_data and context.user_data.get('platform') == 'tiktok':
            logger.info(f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–≤–æ–¥ TikTok: {context.user_data['step']}")
            try:
                from handlers.tiktok_handlers import handle_tiktok_text_input
                await handle_tiktok_text_input(update, context)
                return
            except ImportError:
                await update.message.reply_text("‚ùå TikTok —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
        
        # 4. –û–ë–†–ê–ë–û–¢–ö–ê –ò–ú–ü–û–†–¢–ê –ü–†–û–ö–°–ò
        elif 'import_step' in context.user_data:
            logger.info(f"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏: {context.user_data['import_step']}")
            try:
                from handlers.proxy_import import handle_import_input
                await handle_import_input(update, context)
                return
            except ImportError:
                await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
        
        # 5. SMS –ö–û–î–´ –ò –ö–û–ú–ê–ù–î–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
        elif text.isdigit() and len(text) in [4, 5, 6, 8]:
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω SMS –∫–æ–¥: {text}")
            try:
                from services.enhanced_auth import handle_sms_code_input
                await handle_sms_code_input(update, context)
                return
            except ImportError:
                await update.message.reply_text("SMS –∫–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
                return
        
        # 6. –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
        elif text.lower() in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Instagram Automation Bot v2.0\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
        elif text.lower() in ['–ø–æ–º–æ—â—å', 'help']:
            await update.message.reply_text(
                "üìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
            )
        
        # 7. –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
        else:
            logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
            await update.message.reply_text(
                "‚ùì <b>–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
                "–∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
                parse_mode='HTML'
            )
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger = setup_logging()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "your_telegram_bot_token_here":
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
            logger.error("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
            return
        
        if not ADMIN_TELEGRAM_ID or ADMIN_TELEGRAM_ID == "your_telegram_id_here":
            logger.error("‚ùå ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
            logger.error("–ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à ID –æ—Ç @userinfobot –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Instagram Automation Bot v2.0")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_TELEGRAM_ID}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database.connection import init_database
        if not init_database():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        from handlers.commands import start, help_command, add_user, delete_user, add_admin
        from handlers.callbacks import button_handler
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("adduser", add_user))
        application.add_handler(CommandHandler("deleteuser", delete_user))
        application.add_handler(CommandHandler("addadmin", add_admin))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_text_handler))
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(allowed_updates=['message', 'callback_query'])
        
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()