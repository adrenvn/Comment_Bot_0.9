"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)
handlers/callbacks.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –û–®–ò–ë–û–ö –ü–ê–†–°–ò–ù–ì–ê
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.validators import is_admin, is_user
from ui.menus import main_menu, admin_menu, scenarios_menu, tiktok_scenarios_menu

logger = logging.getLogger(__name__)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data

    logger.info(f"üîß CALLBACK: '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(user_id) and not is_user(user_id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    is_admin_user = is_admin(user_id)
    is_user_user = is_user(user_id)

    try:
        # === –û–°–ù–û–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
        if data == 'back':
            await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu(is_admin_user, is_user_user)
            )
        elif data == 'scenarios_menu':
            await query.edit_message_text(
                "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏:",
                reply_markup=scenarios_menu()
            )
        elif data == 'admin_panel':
            if is_admin_user:
                await query.edit_message_text(
                    "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=admin_menu()
                )
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

        # === –í–´–ë–û–† –ü–õ–ê–¢–§–û–†–ú–´ ===
        elif data == 'instagram_scenarios':
            await query.edit_message_text(
                "üì∏ <b>Instagram –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=scenarios_menu()
            )

        elif data == 'tiktok_scenarios':
            await query.edit_message_text(
                "üéµ <b>TikTok –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=tiktok_scenarios_menu()
            )
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ö–°–ò ===
        elif data == 'manage_proxies':
            try:
                from handlers.proxy import manage_proxies_menu
                await manage_proxies_menu(query)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data == 'add_proxy':
            try:
                from handlers.proxy import start_add_proxy
                await start_add_proxy(query, context)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data == 'list_proxies':
            try:
                from handlers.proxy import list_proxies
                await list_proxies(query)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data == 'check_all_proxies':
            try:
                from handlers.proxy import check_all_proxies
                await check_all_proxies(query)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data == 'proxy_stats':
            try:
                from handlers.proxy import show_proxy_stats
                await show_proxy_stats(query)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # === –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ö–°–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
        elif data.startswith('proxy_type_'):
            try:
                from handlers.proxy import handle_proxy_type_selection
                proxy_type = data.split('_')[2]
                await handle_proxy_type_selection(query, context, proxy_type)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏.")
        elif data == 'confirm_proxy':
            try:
                from handlers.proxy import create_proxy_server
                await create_proxy_server(query, context)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏.")
        elif data.startswith('delete_proxy_'):
            try:
                from handlers.proxy import delete_proxy_server
                proxy_id = int(data.split('_')[2])
                await delete_proxy_server(query, proxy_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–∫—Å–∏.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('check_proxy_'):
            try:
                from handlers.proxy import check_single_proxy
                proxy_id = int(data.split('_')[2])
                await check_single_proxy(query, proxy_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–∫—Å–∏.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('manage_proxy_'):
            try:
                from handlers.proxy import manage_single_proxy
                proxy_id = int(data.split('_')[2])
                await manage_single_proxy(query, proxy_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–∫—Å–∏.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å proxy –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # === –°–¶–ï–ù–ê–†–ò–ò ===
        elif data == 'add_scenario':
            try:
                from handlers.scenarios import start_scenario_creation
                await start_scenario_creation(query, context, user_id)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data == 'my_scenarios':
            try:
                from handlers.scenarios import show_user_scenarios
                await show_user_scenarios(query, user_id)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # === TIKTOK –°–¶–ï–ù–ê–†–ò–ò ===
        elif data == 'add_tiktok_scenario':
            try:
                from handlers.tiktok_handlers import start_tiktok_scenario_creation
                await start_tiktok_scenario_creation(query, context, user_id)
            except ImportError:
                await query.edit_message_text(
                    "‚ùå <b>TikTok —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "–ú–æ–¥—É–ª—å TikTok –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='HTML'
                )
        elif data == 'my_tiktok_scenarios':
            try:
                from handlers.tiktok_handlers import show_user_tiktok_scenarios
                await show_user_tiktok_scenarios(query, user_id)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å tiktok_handlers –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # === –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø ===
        elif data == 'confirm_scenario':
            try:
                from handlers.scenarios import confirm_scenario_creation
                await confirm_scenario_creation(query, context)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data in ['1d', '3d', '7d', '14d', '30d']:
            try:
                from handlers.scenarios import handle_duration_selection
                await handle_duration_selection(query, context, data)
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # === –í–´–ë–û–† –ü–†–û–ö–°–ò –î–õ–Ø –°–¶–ï–ù–ê–†–ò–Ø ===
        elif data == 'choose_proxy':
            await show_proxy_selection(query, context)
        elif data == 'choose_best_proxy':
            await select_best_proxy_automatically(query, context)
        elif data == 'safe_mode_creation':
            await handle_safe_mode_creation(query, context)
        elif data == 'no_proxy':
            await handle_proxy_choice(query, context)
        elif data.startswith('select_proxy_'):
            try:
                proxy_id = int(data.split("_")[2])
                await select_proxy_for_scenario(query, context, proxy_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–∫—Å–∏.")
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø–ú–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===
        elif data.startswith('manage_') and data != 'manage_proxies' and data != 'manage_users' and data != 'manage_admins':
            try:
                from handlers.scenarios import show_scenario_management
                scenario_id = int(data.split("_")[1])
                await show_scenario_management(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('check_comments_'):
            try:
                from handlers.scenarios import check_scenario_comments
                scenario_id = int(data.split("_")[2])
                await check_scenario_comments(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('send_messages_'):
            try:
                from handlers.scenarios import send_pending_messages
                scenario_id = int(data.split("_")[2])
                await send_pending_messages(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('pause_') and not data.startswith('pause_proxy'):
            try:
                from handlers.scenarios import pause_scenario
                scenario_id = int(data.split("_")[1])
                await pause_scenario(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('resume_'):
            try:
                from handlers.scenarios import resume_scenario
                scenario_id = int(data.split("_")[1])
                await resume_scenario(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('restart_'):
            try:
                scenario_id = int(data.split("_")[1])
                await restart_scenario_enhanced(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        elif data.startswith('delete_') and not data.startswith('delete_proxy'):
            try:
                from handlers.scenarios import delete_scenario
                scenario_id = int(data.split("_")[1])
                await delete_scenario(query, scenario_id, user_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('schedule_check_'):
            try:
                from handlers.scenarios import show_schedule_menu
                scenario_id = int(data.split("_")[2])
                await show_schedule_menu(query, scenario_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif data.startswith('set_timer_'):
            try:
                from handlers.scenarios import set_check_timer
                parts = data.split("_")
                minutes = int(parts[2])
                scenario_id = int(parts[3])
                await set_check_timer(query, minutes, scenario_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–µ—Ä–∞.")
            except ImportError:
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò - –ò–°–ü–†–ê–í–õ–ï–ù–´ ===
        elif data == 'manage_users':
            if is_admin_user:
                try:
                    from handlers.scenarios import show_manage_users_info
                    await show_manage_users_info(query)
                except ImportError:
                    await query.edit_message_text(
                        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
                        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                        "‚Ä¢ <code>/adduser [telegram_id]</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "‚Ä¢ <code>/deleteuser [telegram_id]</code> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                        "‚Ä¢ <code>/adduser 123456789</code>\n"
                        "‚Ä¢ <code>/deleteuser 123456789</code>\n\n"
                        "üìû –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @userinfobot",
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
                        ])
                    )
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        elif data == 'manage_admins':
            if is_admin_user:
                try:
                    from handlers.scenarios import show_manage_admins_info
                    await show_manage_admins_info(query)
                except ImportError:
                    await query.edit_message_text(
                        "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
                        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                        "‚Ä¢ <code>/addadmin [telegram_id]</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                        "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                        "‚Ä¢ <code>/addadmin 123456789</code>\n\n"
                        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
                        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
                        "‚Ä¢ –ú–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏\n"
                        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü\n\n"
                        "üìû –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @userinfobot",
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
                        ])
                    )
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")
        elif data == 'status_scenarios':
            if is_admin_user:
                try:
                    from handlers.scenarios import show_scenarios_status
                    await show_scenarios_status(query)
                except ImportError:
                    await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        elif data == 'all_scenarios':
            if is_admin_user:
                try:
                    from handlers.scenarios import show_all_scenarios
                    await show_all_scenarios(query)
                except ImportError:
                    await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.")
        
        # === –ü–û–ú–û–©–¨ ===
        elif data == 'help':
            try:
                from handlers.scenarios import show_help_info
                await show_help_info(query)
            except ImportError:
                await query.edit_message_text(
                    "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
                    "üìñ Instagram Automation Bot v2.0\n\n"
                    "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Instagram\n"
                    "üéµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ TikTok (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
                    "üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
                    "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                    "üëë –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                    ])
                )
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–ù–û–ü–ö–ò ===
        elif data == 'noop':
            pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        
        # === –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï CALLBACK'–ò ===
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            await query.edit_message_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
                ])
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–û–ö–°–ò –í –°–¶–ï–ù–ê–†–ò–Ø–• ===

async def select_best_proxy_automatically(query, context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    try:
        from database.models import ProxyServer
        from database.connection import Session
        
        session = Session()
        try:
            # –ò—â–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏ (—Ä–∞–±–æ—Ç–∞—é—â–∏–π, —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º)
            best_proxy = session.query(ProxyServer).filter_by(
                is_active=True, 
                is_working=True
            ).order_by(ProxyServer.usage_count.asc()).first()
            
            if not best_proxy:
                await query.edit_message_text(
                    "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏.",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')]
                    ])
                )
                return
            
            context.user_data['proxy_id'] = best_proxy.id
            context.user_data['step'] = 'ig_username'
            
            await query.edit_message_text(
                f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏!</b>\n\n"
                f"üì° <b>–ü—Ä–æ–∫—Å–∏:</b> {best_proxy.name}\n"
                f"üåê <b>–¢–∏–ø:</b> {best_proxy.proxy_type.upper()}\n"
                f"üåç <b>–°–µ—Ä–≤–µ—Ä:</b> {best_proxy.host}:{best_proxy.port}\n"
                f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {best_proxy.usage_count}\n\n"
                f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
                f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
                parse_mode='HTML'
            )
        finally:
            session.close()
    except ImportError:
        await query.edit_message_text("‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def show_proxy_selection(query, context):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        from database.models import ProxyServer
        from database.connection import Session
        
        session = Session()
        try:
            working_proxies = session.query(ProxyServer).filter_by(
                is_active=True, 
                is_working=True
            ).order_by(ProxyServer.usage_count.asc()).all()
            
            if not working_proxies:
                await query.edit_message_text(
                    "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏.",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')]
                    ])
                )
                return
            
            text = "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏:</b>\n\n"
            keyboard = []
            
            for proxy in working_proxies[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status = "üü¢" if proxy.is_working else "üî¥"
                usage_info = f"({proxy.usage_count} –∏—Å–ø.)"
                
                text += (
                    f"{status} <b>{proxy.name}</b>\n"
                    f"üì° {proxy.proxy_type.upper()} | {usage_info}\n"
                    f"üåç {proxy.host}:{proxy.port}\n\n"
                )
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úÖ {proxy.name}",
                        callback_data=f'select_proxy_{proxy.id}'
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üéØ –õ—É—á—à–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data='choose_best_proxy')])
            keyboard.append([InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')])
            
            await query.edit_message_text(
                text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        finally:
            session.close()
    except ImportError:
        await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def select_proxy_for_scenario(query, context, proxy_id):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    try:
        from database.models import ProxyServer
        from database.connection import Session
        
        session = Session()
        try:
            proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
            if not proxy:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            context.user_data['proxy_id'] = proxy_id
            context.user_data['step'] = 'ig_username'
            
            await query.edit_message_text(
                f"‚úÖ <b>–ü—Ä–æ–∫—Å–∏ –≤—ã–±—Ä–∞–Ω!</b>\n\n"
                f"üì° <b>–ü—Ä–æ–∫—Å–∏:</b> {proxy.name}\n"
                f"üåê <b>–¢–∏–ø:</b> {proxy.proxy_type.upper()}\n"
                f"üåç <b>–°–µ—Ä–≤–µ—Ä:</b> {proxy.host}:{proxy.port}\n"
                f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {proxy.usage_count}\n\n"
                f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
                f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
                parse_mode='HTML'
            )
        finally:
            session.close()
    except ImportError:
        await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def handle_safe_mode_creation(query, context):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    context.user_data['proxy_id'] = None
    context.user_data['safe_mode'] = True
    context.user_data['step'] = 'ig_username'
    
    await query.edit_message_text(
        f"üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        f"üîê <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:</b>\n"
        f"‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏\n"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        f"‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"‚Ä¢ –†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏, –Ω–æ —Å –º–µ—Ä–∞–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏\n\n"
        f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
        parse_mode='HTML'
    )

async def handle_proxy_choice(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–±–µ–∑ –ø—Ä–æ–∫—Å–∏" """
    context.user_data['proxy_id'] = None
    context.user_data['step'] = 'ig_username'
    
    await query.edit_message_text(
        f"üîß <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫:\n"
        f"‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –ø–æ IP-–∞–¥—Ä–µ—Å—É\n"
        f"‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏\n\n"
        f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
        parse_mode='HTML'
    )

async def restart_scenario_enhanced(query, scenario_id, user_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    try:
        from database.models import Scenario
        from database.connection import Session
        
        session = Session()
        try:
            scenario = session.query(Scenario).filter_by(id=scenario_id).first()
            if not scenario:
                await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            if scenario.user.telegram_id != user_id and not is_admin(user_id):
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
                return

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
            try:
                from config import tasks, instabots
                if scenario_id in tasks:
                    tasks[scenario_id].cancel()
                    del tasks[scenario_id]
                    
                if scenario_id in instabots:
                    try:
                        instabots[scenario_id].logout()
                    except:
                        pass
                    del instabots[scenario_id]
            except ImportError:
                pass  # –ï—Å–ª–∏ –º–æ–¥—É–ª—å config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            scenario.status = 'running'
            scenario.auth_status = 'waiting'
            scenario.auth_attempt = 1
            scenario.error_message = None
            session.merge(scenario)
            session.commit()

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f'check_comments_{scenario_id}'),
                    InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'send_messages_{scenario_id}')
                ],
                [
                    InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f'pause_{scenario_id}'),
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data=f'restart_{scenario_id}')
                ],
                [
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{scenario_id}'),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='my_scenarios')
                ]
            ])

            await query.edit_message_text(
                "üöÄ <b>–°—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>\n\n"
                f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario_id}\n"
                f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n\n"
                f"‚ö° –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...\n"
                f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        finally:
            session.close()
    except ImportError as e:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å: {e}")
        await query.edit_message_text("‚ùå –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")