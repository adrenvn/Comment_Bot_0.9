"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ Instagram
handlers/scenarios.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–¢–°–¢–£–ü–´
"""

import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database.models import User, Scenario, ProxyServer, PendingMessage, SentMessage
from database.connection import Session

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
from services.encryption import EncryptionService
from utils.validators import is_admin, is_user, validate_instagram_credentials
from config import MAX_ACTIVE_SCENARIOS
from ui.menus import scenarios_menu

logger = logging.getLogger(__name__)

def duration_selection_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìÖ 1 –¥–µ–Ω—å", callback_data='1d'),
            InlineKeyboardButton("üìÖ 3 –¥–Ω—è", callback_data='3d')
        ],
        [
            InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data='7d'),
            InlineKeyboardButton("üìÖ 14 –¥–Ω–µ–π", callback_data='14d')
        ],
        [InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data='30d')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')]
    ])

def validate_dm_message(message: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è DM —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message or len(message) < 10 or len(message) > 1000:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞
    spam_words = ['–∫—É–ø–∏—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', 'click here', 'www.']
    message_lower = message.lower()
    
    for word in spam_words:
        if word in message_lower:
            return False
    
    return True

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ TikTok –ª–∏ —ç—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π
    try:
        from handlers.tiktok_handlers import handle_tiktok_text_input
        if await handle_tiktok_text_input(update, context):
            return  # TikTok –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–≤–æ–¥
    except ImportError:
        logger.debug("TikTok –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ TikTok –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Instagram
    if 'step' not in context.user_data:
        return
    
    user_id = update.effective_user.id
    if not is_admin(user_id) and not is_user(user_id):
        return

    text = update.message.text.strip()
    step = context.user_data['step']

    try:
        if step == 'ig_username':
            if not validate_instagram_credentials(text, ''):
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω Instagram.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è."
                )
                return
                
            context.user_data['ig_username'] = text
            context.user_data['step'] = 'ig_password'
            
            await update.message.reply_text(
                f"üîí <b>–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è @{text}:</b>\n\n"
                f"üîê –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                parse_mode='HTML'
            )

        elif step == 'ig_password':
            if len(text) < 6:
                await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
                
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            encryption_service = EncryptionService()
            encrypted_password = encryption_service.encrypt(text)
            
            context.user_data['ig_password'] = encrypted_password
            context.user_data['step'] = 'post_link'
            
            await update.message.reply_text(
                "üîó <b>–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram:</b>\n\n"
                "üìù –ü—Ä–∏–º–µ—Ä: https://www.instagram.com/p/ABC123/\n"
                "üí° –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º",
                parse_mode='HTML'
            )

        elif step == 'post_link':
            if 'instagram.com/p/' not in text and 'instagram.com/reel/' not in text:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç Instagram.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://www.instagram.com/p/ABC123/"
                )
                return
                
            context.user_data['post_link'] = text
            context.user_data['step'] = 'trigger_word'
            
            await update.message.reply_text(
                "üéØ <b>–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä:</b>\n\n"
                "üí° –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏,\n"
                "–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–º—É –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "üìù –ü—Ä–∏–º–µ—Ä: '–∏–Ω—Ñ–æ', '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', '–∑–∞–∫–∞–∑–∞—Ç—å'",
                parse_mode='HTML'
            )

        elif step == 'trigger_word':
            if len(text) < 2 or len(text) > 50:
                await update.message.reply_text(
                    "‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
                
            context.user_data['trigger_word'] = text.lower()
            context.user_data['step'] = 'dm_message'
            
            await update.message.reply_text(
                "üí¨ <b>–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
                "üìù –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n\n"
                "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã\n"
                "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∞–º-—Å–ª–æ–≤–∞\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤",
                parse_mode='HTML'
            )

        elif step == 'dm_message':
            if not validate_dm_message(text):
                await update.message.reply_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:\n"
                    "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –ë—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º"
                )
                return
                
            context.user_data['dm_message'] = text
            context.user_data['step'] = 'active_until'
            
            # –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await update.message.reply_text(
                "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è:</b>\n\n"
                "üìä <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–Ω–∏—Ç–µ —Å 1-3 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
                parse_mode='HTML',
                reply_markup=duration_selection_menu()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def start_scenario_creation(query, context, user_id):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        active_count = session.query(Scenario).filter_by(
            user_id=user.id, 
            status='running'
        ).count()
        
        if active_count >= MAX_ACTIVE_SCENARIOS:
            await query.edit_message_text(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {MAX_ACTIVE_SCENARIOS} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
                f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å: {active_count}\n\n"
                f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
                parse_mode='HTML',
                reply_markup=scenarios_menu()
            )
            return

        context.user_data.clear()
        context.user_data['step'] = 'proxy_choice'
        
        # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        working_proxies = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).all()
        
        keyboard = []
        if working_proxies:
            keyboard.append([InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='choose_proxy')])
            keyboard.append([InlineKeyboardButton("üéØ –õ—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏", callback_data='choose_best_proxy')])
        
        keyboard.append([InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')])
        keyboard.append([InlineKeyboardButton("üö´ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏", callback_data='no_proxy')])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='scenarios_menu')])
        
        proxy_info = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}" if working_proxies else "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"
        proxy_recommendation = ""
        
        if working_proxies:
            proxy_recommendation = (
                "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ –ü—Ä–æ–∫—Å–∏ –ø–æ–≤—ã—à–∞—é—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –°–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                "‚Ä¢ –ü–æ–∑–≤–æ–ª—è—é—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è IP"
            )
        
        await query.edit_message_text(
            f"üîß <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
            f"üìä {proxy_info}\n"
            f"{proxy_recommendation}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def show_user_scenarios(query, user_id):
    """–ü–æ–∫–∞–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫—Å–∏"""
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user or not user.scenarios:
            await query.edit_message_text(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Instagram!",
                parse_mode='HTML',
                reply_markup=scenarios_menu()
            )
            return

        text = "üìã <b>–í–∞—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n\n"
        keyboard = []
        
        for scenario in user.scenarios:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = {
                'running': 'üü¢',
                'paused': '‚è∏Ô∏è',
                'stopped': 'üî¥',
                'error': '‚ùå'
            }.get(scenario.status, '‚ö™')
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
            proxy_info = "üåê –ü—Ä—è–º–æ–µ" if not scenario.proxy_server else f"üîó {scenario.proxy_server.name}"
            
            # –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            time_left = ""
            if scenario.active_until:
                remaining = scenario.active_until - datetime.now()
                if remaining.total_seconds() > 0:
                    days = remaining.days
                    hours = remaining.seconds // 3600
                    time_left = f"‚è±Ô∏è {days}–¥ {hours}—á"
                else:
                    time_left = "‚è±Ô∏è –ò—Å—Ç–µ–∫"
            
            text += (
                f"{status_emoji} <b>#{scenario.id}</b> - @{scenario.ig_username}\n"
                f"üì± {proxy_info} | {time_left}\n"
                f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #{scenario.id}",
                    callback_data=f'manage_{scenario.id}'
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def handle_proxy_choice(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–±–µ–∑ –ø—Ä–æ–∫—Å–∏" """
    context.user_data['proxy_id'] = None
    context.user_data['step'] = 'ig_username'
    
    await query.edit_message_text(
        f"üîß <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫:\n"
        f"‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –ø–æ IP-–∞–¥—Ä–µ—Å—É\n"
        f"‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏\n\n"
        f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
        parse_mode='HTML'
    )

async def show_proxy_selection(query, context):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    session = Session()
    try:
        working_proxies = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).all()
        
        if not working_proxies:
            await query.edit_message_text(
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')]
                ])
            )
            return
        
        text = "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏:</b>\n\n"
        keyboard = []
        
        for proxy in working_proxies[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "üü¢" if proxy.is_working else "üî¥"
            usage_info = f"({proxy.usage_count} –∏—Å–ø.)"
            
            text += (
                f"{status} <b>{proxy.name}</b>\n"
                f"üì° {proxy.proxy_type.upper()} | {usage_info}\n"
                f"üåç {proxy.host}:{proxy.port}\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚úÖ {proxy.name}",
                    callback_data=f'select_proxy_{proxy.id}'
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üéØ –õ—É—á—à–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data='choose_best_proxy')])
        keyboard.append([InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def select_proxy_for_scenario(query, context, proxy_id):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
        if not proxy:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        context.user_data['proxy_id'] = proxy_id
        context.user_data['step'] = 'ig_username'
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü—Ä–æ–∫—Å–∏ –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            f"üì° <b>–ü—Ä–æ–∫—Å–∏:</b> {proxy.name}\n"
            f"üåê <b>–¢–∏–ø:</b> {proxy.proxy_type.upper()}\n"
            f"üåç <b>–°–µ—Ä–≤–µ—Ä:</b> {proxy.host}:{proxy.port}\n"
            f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {proxy.usage_count}\n\n"
            f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
            f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
            parse_mode='HTML'
        )
    finally:
        session.close()

async def handle_duration_selection(query, context, duration):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    days_map = {
        '1d': 1, '3d': 3, '7d': 7, 
        '14d': 14, '30d': 30
    }
    days = days_map.get(duration, 1)
    
    active_until = datetime.now() + timedelta(days=days)
    context.user_data['active_until'] = active_until
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['ig_username', 'ig_password', 'post_link', 'trigger_word', 'dm_message']
    missing_fields = [field for field in required_fields if field not in context.user_data]
    
    if missing_fields:
        await query.edit_message_text(
            f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing_fields)}\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=scenarios_menu()
        )
        context.user_data.clear()
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        scenario = Scenario(
            user_id=user.id,
            proxy_id=context.user_data.get('proxy_id'),
            ig_username=context.user_data['ig_username'],
            ig_password_encrypted=context.user_data['ig_password'],
            post_link=context.user_data['post_link'],
            trigger_word=context.user_data['trigger_word'],
            dm_message=context.user_data['dm_message'],
            active_until=active_until
        )
        
        session.add(scenario)
        session.commit()
        
        proxy_info = "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        if scenario.proxy_server:
            proxy_info = f"üåê –ü—Ä–æ–∫—Å–∏: {scenario.proxy_server.name}"
        
        await query.edit_message_text(
            f"‚úÖ <b>–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üÜî ID: #{scenario.id}\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n"
            f"üîó –ü–æ—Å—Ç: {scenario.post_link[:50]}...\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n"
            f"{proxy_info}\n"
            f"‚è∞ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: {scenario.active_until.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ú–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='my_scenarios')],
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f'manage_{scenario.id}')]
            ])
        )
        
        context.user_data.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        session.rollback()
    finally:
        session.close()

async def confirm_scenario_creation(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    proxy_id = context.user_data.get('proxy_id')
    safe_mode = context.user_data.get('safe_mode', False)
    
    if proxy_id:
        session = Session()
        try:
            proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
            proxy_info = f"üåê –ü—Ä–æ–∫—Å–∏: {proxy.name}" if proxy else "‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        finally:
            session.close()
    elif safe_mode:
        proxy_info = "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)"
    else:
        proxy_info = "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
    
    context.user_data['step'] = 'ig_username'
    
    await query.edit_message_text(
        f"üîß <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
        f"{proxy_info}\n\n"
        f"üîß <b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        f"üí° <i>–ü—Ä–∏–º–µ—Ä: username (–±–µ–∑ @)</i>",
        parse_mode='HTML'
    )

async def show_scenario_management(query, scenario_id, user_id):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –°—Ç–∞—Ç—É—Å —Å—Ü–µ–Ω–∞—Ä–∏—è
        status_emoji = {
            'running': 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω',
            'paused': '‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ',
            'stopped': 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'error': '‚ùå –û—à–∏–±–∫–∞'
        }.get(scenario.status, '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
        proxy_info = "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        if scenario.proxy_server:
            proxy_info = f"üåê {scenario.proxy_server.name}"
        
        # –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        time_left = "‚è±Ô∏è –ò—Å—Ç–µ–∫"
        if scenario.active_until and scenario.active_until > datetime.now():
            remaining = scenario.active_until - datetime.now()
            days = remaining.days
            hours = remaining.seconds // 3600
            time_left = f"‚è±Ô∏è {days}–¥ {hours}—á"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pending_count = session.query(PendingMessage).filter_by(scenario_id=scenario_id).count()
        sent_count = session.query(SentMessage).filter_by(scenario_id=scenario_id).count()
        
        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º #{scenario_id}</b>\n\n"
            f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> @{scenario.ig_username}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji}\n"
            f"üåê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> {proxy_info}\n"
            f"üéØ <b>–¢—Ä–∏–≥–≥–µ—Ä:</b> <code>{scenario.trigger_word}</code>\n"
            f"‚è∞ <b>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {time_left}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {pending_count}\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}"
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        
        if scenario.status == 'running':
            keyboard.append([
                InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f'pause_{scenario_id}'),
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data=f'restart_{scenario_id}')
            ])
        elif scenario.status == 'paused':
            keyboard.append([
                InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f'resume_{scenario_id}'),
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data=f'restart_{scenario_id}')
            ])
        else:
            keyboard.append([
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'resume_{scenario_id}')
            ])
        
        keyboard.extend([
            [
                InlineKeyboardButton("üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f'check_comments_{scenario_id}'),
                InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'send_messages_{scenario_id}')
            ],
            [
                InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f'schedule_check_{scenario_id}')
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{scenario_id}'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='my_scenarios')
            ]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–º: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–Ø–ú–ò ===

async def check_scenario_comments(query, scenario_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        await query.edit_message_text(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</b>\n\n"
            f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º...\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n"
            f"üéØ –ò—â—É —Ç—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>",
            parse_mode='HTML'
        )
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        pending_count = session.query(PendingMessage).filter_by(scenario_id=scenario_id).count()
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: 0\n"
            f"üì¨ –í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: {pending_count}\n"
            f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'send_messages_{scenario_id}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_{scenario_id}')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")
    finally:
        session.close()

async def send_pending_messages(query, scenario_id, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        pending_count = session.query(PendingMessage).filter_by(scenario_id=scenario_id).count()
        
        if pending_count == 0:
            await query.edit_message_text(
                "üì≠ <b>–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f'check_comments_{scenario_id}')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_{scenario_id}')]
                ])
            )
            return

        await query.edit_message_text(
            f"üì© <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é {pending_count} —Å–æ–æ–±—â–µ–Ω–∏–π...\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}",
            parse_mode='HTML'
        )
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        sent_count = 0
        failed_count = 0
        
        await query.edit_message_text(
            f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: {pending_count - sent_count}\n\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_{scenario_id}')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    finally:
        session.close()

async def show_schedule_menu(query, scenario_id):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    await query.edit_message_text(
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π #{scenario_id}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚ö° 5 –º–∏–Ω—É—Ç", callback_data=f'set_timer_5_{scenario_id}'),
                InlineKeyboardButton("üïê 15 –º–∏–Ω—É—Ç", callback_data=f'set_timer_15_{scenario_id}')
            ],
            [
                InlineKeyboardButton("üïë 30 –º–∏–Ω—É—Ç", callback_data=f'set_timer_30_{scenario_id}'),
                InlineKeyboardButton("üïí 1 —á–∞—Å", callback_data=f'set_timer_60_{scenario_id}')
            ],
            [
                InlineKeyboardButton("üïï 3 —á–∞—Å–∞", callback_data=f'set_timer_180_{scenario_id}'),
                InlineKeyboardButton("üïò 6 —á–∞—Å–æ–≤", callback_data=f'set_timer_360_{scenario_id}')
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_{scenario_id}')]
        ])
    )

async def set_check_timer(query, minutes, scenario_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
        next_check = datetime.now() + timedelta(minutes=minutes)
        
        await query.edit_message_text(
            f"‚úÖ <b>–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario_id}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_check.strftime('%H:%M:%S')}\n\n"
            f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f'schedule_check_{scenario_id}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_{scenario_id}')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞.")
    finally:
        session.close()

async def pause_scenario(query, scenario_id, user_id):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        try:
            from config import tasks
            if scenario_id in tasks:
                tasks[scenario_id].cancel()
                del tasks[scenario_id]
        except ImportError:
            pass

        scenario.status = 'paused'
        session.merge(scenario)
        session.commit()
        
        await query.edit_message_text(
            f"‚è∏Ô∏è <b>–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario_id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"‚ñ∂Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å'",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f'resume_{scenario_id}')],
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f'manage_{scenario_id}')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

async def resume_scenario(query, scenario_id, user_id):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        scenario.status = 'running'
        session.merge(scenario)
        session.commit()
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
        
        await query.edit_message_text(
            f"‚ñ∂Ô∏è <b>–°—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario_id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'pause_{scenario_id}')],
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f'manage_{scenario_id}')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

async def delete_scenario(query, scenario_id, user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        try:
            from config import tasks, instabots
            if scenario_id in tasks:
                tasks[scenario_id].cancel()
                del tasks[scenario_id]
                
            if scenario_id in instabots:
                try:
                    instabots[scenario_id].logout()
                except:
                    pass
                del instabots[scenario_id]
        except ImportError:
            pass

        username = scenario.ig_username
        
        # –£–¥–∞–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è cascade)
        session.delete(scenario)
        session.commit()

        await query.edit_message_text(
            f"üóëÔ∏è <b>–°—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ú–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='my_scenarios')],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data='add_scenario')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

# === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===

async def show_manage_users_info(query):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    await query.edit_message_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/adduser [telegram_id]</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ <code>/deleteuser [telegram_id]</code> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>/adduser 123456789</code>\n"
        "‚Ä¢ <code>/deleteuser 123456789</code>\n\n"
        "üìû –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @userinfobot",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
        ])
    )

async def show_manage_admins_info(query):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    await query.edit_message_text(
        "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/addadmin [telegram_id]</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "‚Ä¢ <code>/addadmin 123456789</code>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
        "‚Ä¢ –ú–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü\n\n"
        "üìû –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @userinfobot",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
        ])
    )

async def show_scenarios_status(query):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–∞–¥–º–∏–Ω)"""
    session = Session()
    try:
        scenarios = session.query(Scenario).all()
        
        if not scenarios:
            await query.edit_message_text(
                "üì≠ <b>–°—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
                ])
            )
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for scenario in scenarios:
            status = scenario.status
            status_counts[status] = status_counts.get(status, 0) + 1

        text = "üìä <b>–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
        
        status_emoji = {
            'running': 'üü¢',
            'paused': '‚è∏Ô∏è',
            'stopped': 'üî¥',
            'error': '‚ùå'
        }
        
        for status, count in status_counts.items():
            emoji = status_emoji.get(status, '‚ö™')
            text += f"{emoji} {status.title()}: {count}\n"
        
        text += f"\nüìà <b>–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</b> {len(scenarios)}"
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='all_scenarios')],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        session.close()

async def show_all_scenarios(query):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–∞–¥–º–∏–Ω)"""
    session = Session()
    try:
        scenarios = session.query(Scenario).order_by(Scenario.created_at.desc()).limit(20).all()
        
        if not scenarios:
            await query.edit_message_text(
                "üì≠ <b>–°—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
                ])
            )
            return

        text = "üìã <b>–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)</b>\n\n"
        
        for scenario in scenarios:
            status_emoji = {
                'running': 'üü¢',
                'paused': '‚è∏Ô∏è',
                'stopped': 'üî¥',
                'error': '‚ùå'
            }.get(scenario.status, '‚ö™')
            
            proxy_info = "üåê" if scenario.proxy_server else "üì°"
            
            text += (
                f"{status_emoji} <b>#{scenario.id}</b> - @{scenario.ig_username}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {scenario.user.telegram_id}\n"
                f"{proxy_info} –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n\n"
            )
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='status_scenarios')],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        session.close()

async def show_help_info(query):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await query.edit_message_text(
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Instagram Automation Bot v2.0</b>\n\n"
        "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Instagram\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ DM —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏\n\n"
        "üì± <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "4. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç\n"
        "5. –ó–∞–¥–∞–π—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä\n"
        "6. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n"
        "7. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏\n"
        "‚Ä¢ –ù–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã Instagram\n"
        "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
        ])
    )

def show_scenario_management_menu(scenario_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f'check_comments_{scenario_id}'),
            InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'send_messages_{scenario_id}')
        ],
        [
            InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f'pause_{scenario_id}'),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data=f'restart_{scenario_id}')
        ],
        [
            InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data=f'schedule_check_{scenario_id}')
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{scenario_id}'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='my_scenarios')
        ]
    ])